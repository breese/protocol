[/ 
  Copyright (C) 2015 Bjorn Reese <breese@users.sourceforge.net>

  Distributed under the Boost Software License, Version 1.0.
     (See accompanying file LICENSE_1_0.txt or copy at
           http://www.boost.org/LICENSE_1_0.txt).
]

[section:tutorial Tutorial]

[section JSON serialization]

This tutorial shows how [link protocol.json.oarchive `json::oarchive`] can be
used to serialize C++ data into JSON in just a few lines of code.

[heading POD serialization]

Let us start by serializing some plain old data.
First we include some headers:
```
#include <trial/protocol/buffer/string.hpp> // Use std::string as output buffer
#include <trial/protocol/json/serialization.hpp>
```
The `<trial/protocol/json/serialization.hpp>` header is needed to get the
[link protocol.json.oarchive JSON output archive] that converts our data into
JSON.
The `json::oarchive` constructor takes an [link protocol.buffer output buffer],
and because we want to serialize the result into a `std::string` we must
include an appropriate wrapper from the `<trial/protocol/buffer/string.hpp>`
header. If our output buffer had been of a different type, then we should have
included another header.

Next we serialize our data:
```
// Build data
bool data = true;

// Serialization
std::string result;
trial::protocol::json::oarchive archive(result);
archive << data;

assert(result == "true");
```

[heading Non-intrusive serialization]

There is build-in support for serialization of certain STL containers.
The following example shows how to serialize an `std::map`.
In addition to the previously mentioned headers, we also include headers to
serialize both `std::string` and `std::map`.

```
#include <trial/protocol/buffer/string.hpp>
#include <trial/protocol/json/serialization.hpp>
```
The serialization code is exactly the same as in the previous example.
```
// Build data
std::map<std::string, std::string> data;
data["alpha"] = "hydrogen";
data["bravo"] = "helium";

// Serialization
std::string result;
trial::protocol::json::oarchive archive(result);
archive << data;

assert(result == "{\"alpha\":\"hydrogen",\"bravo\":\"helium\"}");
```
[endsect]

[section Push parser]

This tutorial demonstrates how [link protocol.json.reader `json::reader`] can be
used to create a push parser.

A push parser iterates over the JSON input and invokes callback functions for
each parsed data item.
Each data type has a distinct callback function.
The user provides the implemention of these callback functions.
The design is a variation of the [@http://en.wikipedia.org/wiki/Builder_pattern
Builder design pattern], and this is how an XML
[@http://en.wikipedia.org/wiki/Simple_API_for_XML SAX] parser works.

[heading Definitions]

First we define the `push_parser` class which takes the callback functions as
a template parameter.[footnote We could also have used a polymorphic interface
for the callback functions.]
```
#include <trial/protocol/json/reader.hpp>

namespace json = trial::protocol::json;

template <typename Callbacks>
class push_parser
{
public:
    push_parser(const json::reader& reader) : reader(reader) {}

    void parse();

private:
    Callbacks callbacks;
    json::reader reader;
};
```
The `Callbacks` template parameter must be a class that implements a member
function for each callback function.
The `Callbacks` class looks something like this:
```
#include <string>
#include <boost/cstdint.hpp>

class my_callbacks
{
public:
    void on_null();
    void on_boolean(bool);
    void on_integer(boost::intmax_t);
    void on_floating(double);
    void on_string(const std::string&);
    void on_begin_array();
    void on_end_array();
    void on_begin_object();
    void on_end_object();
};
```
We are not going to implement `my_callbacks` here, although a simple
implementation could be to simply print the type and value in each callback
function.

[heading Execution]

After these preliminary definitions, we have now arrived at the crux of the
problem: how to implement the `push_parser::parse()` function.
As this is a demonstration of the [link protocol.json.reader `json::reader`],
we are naturally going to implement the push parser with a pull parser.
Fortunately that is very simple:

# Iterate over the JSON input using `json::reader::next()`.
    # Identify the current token with `json::reader::symbol()`.
    # Invoke the appropriate callback function.
      The current value for data tokens is obtained with `json::reader::value<T>()`.
      
Here is the entire implementation in its full glory:
```
void push_parser::parse()
{
    do
    {
        switch (reader.symbol())
        {
        case json::symbol::null:
            callbacks.on_null();
            break;

        case json::symbol::boolean:
            callbacks.on_boolean(reader.value<bool>());
            break;

        case json::symbol::integer:
            callbacks.on_integer(reader.value<boost::intmax_t>());
            break;

        case json::symbol::floating:
            callbacks.on_floating(reader.value<double>());
            break;

        case json::symbol::string:
            callbacks.on_string(reader.value<std::string>());
            break;

        case json::symbol::begin_array:
            callbacks.on_begin_array();
            break;

        case json::symbol::end_array:
            callbacks.on_end_array();
            break;

        case json::symbol::begin_object:
            callbacks.on_begin_object();
            break;

        case json::symbol::end_object:
            callbacks.on_end_object();
            break;

        default:
            break;
        }

    } while (reader.next());
}
```

Finally, we use the above push parser as follows:
```
json::reader reader("[null,true,42]"); // Replace with actual JSON input
push_parser<my_callbacks> parser(reader);
parser.parse();
```
[endsect]

[endsect]
