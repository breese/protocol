[/ 
  Copyright (C) 2015 Bjorn Reese <breese@users.sourceforge.net>

  Distributed under the Boost Software License, Version 1.0.
     (See accompanying file LICENSE_1_0.txt or copy at
           http://www.boost.org/LICENSE_1_0.txt).
]

[#protocol.buffer]
[section Buffer]

C++ data is encoded in a protocol-specific format with a protocol
generator[footnote Protocol generators are the protocol-specific `writer`
and `oarchive` classes.].
The result is written into the output buffer that is passed in the constructor
of the protocol generator.

Various types of output buffers are supported, including `std::string`,
`std::vector`, and output streams.
Support for other buffer types can be added via buffer traits.

[note The following examples uses the JSON generators for exposition purposes
only.]

[heading String]

Writing the encoded output to an `std::string` requires the inclusion of the
`<trial/protocol/buffer/string.hpp>` header file.

```
#include <trial/protocol/buffer/string.hpp>
#include <trial/protocol/json/writer.hpp>

std::string result;
json::writer writer(result);
writer.value(42);
assert(result == "42");
```

[heading Vector]

When writing the encoded output to an `std::vector<T>` the type `T` must
match the character type of the protocol generator. This is `char` in the
following example.
The `<trial/protocol/buffer/vector.hpp>` header file must be included first.

```
#include <trial/protocol/buffer/vector.hpp>
#include <trial/protocol/json/writer.hpp>

std::vector<char> result;
json::writer writer(result);
writer.value(42);
assert(result.size() == size);
assert(result[0] == '4');
assert(result[1] == '2');
```

[heading I/O streams]

The encoded output can be written to any output stream that inherits from
`std::ostream`.
The `<trial/protocol/buffer/ostream.hpp>` header file must be included.

```
#include <sstream>
#include <trial/protocol/buffer/ostream.hpp>
#include <trial/protocol/json/writer.hpp>

std::ostringstream output;
json::writer writer(output);
writer.value(42);
assert(output.str() == "42");
```

[heading Traits]

The encoded output can be written to other output buffer types.
This is done by specifying a buffer wrapper and a trait to select this
buffer wrapper for the output buffer type.

The buffer wrapper musts inherit from `buffer::base` and implement the
following API:

[table Buffer Base Members
[[Member][Description]]
[[`bool grow(size_type)`][Reserve space in the output buffer. Returns false if the requested space cannot be reserved, in which case no further data will be written to the output buffer.]]
[[`void write(value_type)`][Output a single character.]]
[[`void write(const view_type&)`][Output a sequence of characters.]]
]

Assume that we add support for `std::deque`. First the buffer wrapper for
`std::deque` is written like this:

```
#include <deque>
#include <trial/protocol/buffer/base.hpp>

namespace my {

template <CharT>
class deque_wrapper : public buffer::base<CharT>
{
public:
    using value_type = typename buffer::base<CharT>::value_type;
    using size_type = typename buffer::base<CharT>::size_type;
    using view_type = typename buffer::base<CharT>::view_type;

    deque_wrapper(std::deque<value_type>& buffer)
        : buffer(buffer)
    {}

protected:
    virtual bool grow(size_type delta)
    {
        buffer.resize(buffer.size() + delta);
    }

    virtual void write(value_type value)
    {
        buffer.push_back(value);
    }

    virtual void write(const view_type& view)
    {
        buffer.insert(buffer.end(), view.begin(), view.end());
    }

private:
    std::deque<value_type>& buffer;
};

}
```

Next we must make this wrapper known to the protocol generator, which is done
as follows:

```
namespace trial { namespace protocol { namespace buffer {

template <typename T>
struct traits< std::deque<T> >
{
    using buffer_type = my::deque_wrapper<T>;
};

}}}
```

[note The `traits` struct must be located inside the `trial::protocol::buffer`
namespace.]

[endsect]
