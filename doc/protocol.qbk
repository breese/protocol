[/ 
  Copyright (C) 2015 Bjorn Reese <breese@users.sourceforge.net>

  Distributed under the Boost Software License, Version 1.0.
     (See accompanying file LICENSE_1_0.txt or copy at
           http://www.boost.org/LICENSE_1_0.txt).
]

[library Trial.Protocol
    [quickbook 1.5]
    [id protocol]
    [dirname protocol]
    [purpose JSON parser and generator]
    [authors [Reese, Bjorn]]
    [copyright 2015-2018 Bjorn Reese]
    [license Distributed under the [@http://www.boost.org/LICENSE_1_0.txt Boost Software License, Version 1.0].]
]

[def __protocol__ Trial.Protocol]

[important __protocol__ is not an official Boost library.

__protocol__ is still work-in-progress.
]

[section Introduction]
__protocol__ is a header-only library[footnote __protocol__ serialization relies
on Boost.Serialization, which is not header-only. Serialization is an optional
feature.] for processing (parsing, manipulating, and generating) encoded data
for network wire protocols. __protocol__ contains several interfaces for parsing
and generating encoded data, as well as a heterogeneous tree data structure that
can be used as a parse tree.

Currently supported protocols[footnote __protocol__ only supports protocols that
can be tokenized without using a schema.] are:

* [link protocol.json JSON]
* BinToken

[heading Levels of Abstraction]

Protocol processing can be done at any of three levels of abstraction:

* Incremental processors transforms the data token by token.
  There are two types of incremental processing: (i) push processing where the
  processing is done automatically and each token causes a callback to be
  invoked, and (ii) pull processing where the user has to advance manually from
  one token to the next.[footnote Pull processors resembles a
  [@http://en.cppreference.com/w/cpp/concept/ForwardIterator ForwardIterator],
  albeit with an interface closer to the
  [@https://en.wikipedia.org/wiki/Iterator_pattern Iterator pattern].]
  Incremental processing is also called stream processing.
* Serialization archives are used to transform directly between the protocol
  format and C++ data structures.
  The serialization archives do not go through an intermediate representation
  and can therefore perform faster and in less memory.
  The mapping between the protocol format and the C++ data structures
  can be specified both (i) intrusively by augmenting the C++ data
  structure with the mapping, and (ii) non-intrusively by specifying the
  mapping in separate function outside the C++ data structure.
* Tree processing[footnote Tree processing is similar to creating a
  [@http://en.wikipedia.org/wiki/Document_Object_Model Document Object Model].]
  transforms the the entire encoded data into a generic tree structure which
  can then be examined and manipulated with tree operations.

At each level of abstraction there are processors for both parsing and
generating protocol formats. These are summarized below.

[table
[[] [Parser] [Generator]]
[[Incremental]
 [The encoded input can be parsed token by token with an incremental parser.
  For each token we can query the current token type and value.]
 [The encoded output can be generated token by token with an incremental
  generator.]]
[[Serialization]
 [The encoded input can be deserialized directly into arbitrary C++ data
  structures with an input archive.]
 [Arbitrary C++ data structures can be serialized directly into encoded output
  with an output archive.]]
[[Tree]
 [The encoded input can be parsed into a dedicated parse tree.]
 [The dedicated parse tree can be transformed into an encoded output.]]
]

The protocol generators can write the encoded output to different types of
buffers as long as an [link protocol.core.adapter adapter] exists for the buffer
type. The correct header files must be included for this to work seamlessly.

[note For brevity all examples in this documentation assumes
```using namespace trial::protocol;```
]

[endsect]

[include core/core.qbk]
[include json/json.qbk]
[include dynamic/dynamic.qbk]
