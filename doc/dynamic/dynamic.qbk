[/ 
  Copyright (C) 2017 Bjorn Reese <breese@users.sourceforge.net>

  Distributed under the Boost Software License, Version 1.0.
     (See accompanying file LICENSE_1_0.txt or copy at
           http://www.boost.org/LICENSE_1_0.txt).
]

[/library Trial.Dynamic
    [quickbook 1.5]
    [id protocol]
    [dirname dynamic]
    [purpose Dynamic variable]
    [authors [Reese, Bjorn]]
    [copyright 2017 Bjorn Reese]
    [license Distributed under the [@http://www.boost.org/LICENSE_1_0.txt Boost Software License, Version 1.0].]
    [source-mode c++]
]

[section Dynamic Variable]

[def __dynamic__ Trial.Dynamic]

[important __dynamic__ is not an official Boost library.

__dynamic__ is still work-in-progress.
]

[section Overview]

__dynamic__ is a C++11 header-only library with a C++ dynamic variable.

* The dynamic variable is a [@https://en.wikipedia.org/wiki/Tagged_union tagged union] whose type and value can change dynamically during program execution.
* The dynamic variable supports [@http://en.cppreference.com/w/cpp/language/types fundamental data types][footnote Characters (`char`, `wchar_t`, `char16_t`, and `char32_t`) are not supported directly, but only indirectly via strings.][footnote `void` is not a [@http://stepanovpapers.com/DeSt98.pdf regular type], so it has been replaced with the `dynamic::nullable` type and the `dynamic::null` value.] and strings.
* The dynamic variable supports sequenced and associative containers of dynamic variables and can therefore act as a heterogenous tree data structure.
* The dynamic variable meets the requirements of [@http://en.cppreference.com/w/cpp/concept/Container Container] and therefore works with standard C++ algorithms.
* The dynamic variable can be customized with an allocator.

The resemblance between `dynamic::variable` and [@http://en.cppreference.com/w/cpp/utility/variant `std::variant`] is obvious, but there are notable differences. While `std::variant` supports custom types, `dynamic::variable` is restricted to the above-mentioned data types and containers. This restriction enables `dynamic::variable` to adhere to the Container concept, and thus to have a richer interface that works with algorithms.

Dynamic variables are useful for carrying configuration data, constructing parse trees for data formats, and protocol serialization.

[endsect]

[include tutorial.qbk]
[include guide.qbk]
[include rationale.qbk]

[section Acknowledgement]

Ferruccio Barletta for an earlier C++03 compliant [@https://github.com/ferruccio/dynamic-cpp dynamic variable].

Agustín Bergé for the article [@http://talesofcpp.fusionfenix.com/post-17/eggs.variant---part-i "Eggs.Variant - Part I"].

Peter Dimov for the article "Simple C++11 metaprogramming" ([@http://pdimov.com/cpp2/simple_cxx11_metaprogramming.html part 1] and [@http://pdimov.com/cpp2/simple_cxx11_metaprogramming_2.html part 2].)

Thomas Köppe for the article [@https://rawgit.com/google/cxx-std-draft/allocator-paper/allocator_user_guide.html "A Visitor's Guide to C++ Allocators"].

[endsect]

[xinclude ../dynamic_reference.xml]
[endsect]
