#ifndef TRIAL_PROTOCOL_JSON_DETAIL_TRAITS_HPP
#define TRIAL_PROTOCOL_JSON_DETAIL_TRAITS_HPP

///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2015 Bjorn Reese <breese@users.sourceforge.net>
//
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)
//
///////////////////////////////////////////////////////////////////////////////

#include <cstddef> // std::size_t
#include <string>
#include <boost/config.hpp>

namespace trial
{
namespace protocol
{
namespace json
{
namespace detail
{
namespace traits
{

template <typename CharT>
struct alphabet
{
};

//-----------------------------------------------------------------------------

enum
{
    character_space = 1 << 0,     // 0x09 | 0x0A | 0x0D | 0x20
    character_digit = 1 << 1,     // 0-9
    character_hex_upper = 1 << 2, // A-F
    character_hex_lower = 1 << 3, // a-f
    character_alpha = 1 << 4      // A-Z | a-z
};

template <typename CharT>
std::uint8_t flags(CharT index) noexcept
{
    static constexpr std::uint8_t data[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
        0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
        0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    return data[std::uint8_t(index)];
}

template <typename CharT>
bool is_space(CharT value) noexcept
{
    return flags(value) & character_space;
}

template <typename CharT>
bool is_digit(CharT value) noexcept
{
    return flags(value) & character_digit;
}

template <typename CharT>
bool is_hexdigit(CharT value) noexcept
{
    return flags(value) & (character_digit | character_hex_upper | character_hex_lower);
}

template <typename CharT>
bool is_alpha(CharT value) noexcept
{
    return flags(value) & character_alpha;
}

template <typename CharT>
int to_hexint(CharT value) noexcept;

//-----------------------------------------------------------------------------

enum class category
{
    narrow,
    extra_1,
    extra_2,
    extra_3,
    extra_4,
    extra_5,
    quote,
    escape,
    illegal
};

template <typename CharT>
auto to_category(CharT value) noexcept -> category;

//-----------------------------------------------------------------------------

template <typename CharT>
auto skip_narrow(const CharT *) noexcept -> const CharT *;

} // namespace traits
} // namespace detail
} // namespace json
} // namespace protocol
} // namespace trial

#include <trial/protocol/json/detail/traits.ipp>

#endif // TRIAL_PROTOCOL_JSON_DETAIL_TRAITS_HPP
